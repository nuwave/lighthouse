<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\Proto;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Trace</code>.
 */
class Trace extends \Google\Protobuf\Internal\Message
{
    /**
     * Wallclock time when the trace began.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 4;</code>
     */
    protected ?\Google\Protobuf\Timestamp $start_time = null;

    /**
     * Wallclock time when the trace ended.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 3;</code>
     */
    protected ?\Google\Protobuf\Timestamp $end_time = null;

    /**
     * High precision duration of the trace; may not equal end_time-start_time
     * (eg, if your machine's clock changed during the trace).
     *
     * Generated from protobuf field <code>uint64 duration_ns = 11;</code>
     */
    protected $duration_ns = 0;

    /**
     * A tree containing information about all resolvers run directly by this
     * service, including errors.
     *
     * Generated from protobuf field <code>.Trace.Node root = 14;</code>
     */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\Trace\Node $root = null;

    /**
     * If this is true, the trace is potentially missing some nodes that were
     * present on the query plan. This can happen if the trace span buffer used
     * in the Router fills up and some spans have to be dropped. In these cases
     * the overall trace timing will still be correct, but the trace data could
     * be missing some referenced or executed fields, and some nodes may be
     * missing. If this is true we should display a warning to the user when they
     * view the trace in Explorer.
     *
     * Generated from protobuf field <code>bool is_incomplete = 33;</code>
     */
    protected $is_incomplete = false;

    /**
     * In addition to details.raw_query, we include a "signature" of the query,
     * which can be normalized: for example, you may want to discard aliases, drop
     * unused operations and fragments, sort fields, etc. The most important thing
     * here is that the signature match the signature in StatsReports. In
     * StatsReports signatures show up as the key in the per_query map (with the
     * operation name prepended).  The signature should be a valid GraphQL query.
     * All traces must have a signature; if this Trace is in a FullTracesReport
     * that signature is in the key of traces_per_query rather than in this field.
     * Engineproxy provides the signature in legacy_signature_needs_resigning
     * instead.
     *
     * Generated from protobuf field <code>string signature = 19;</code>
     */
    protected $signature = '';

    /**
     * Optional: when GraphQL parsing or validation against the GraphQL schema fails, these fields
     * can include reference to the operation being sent for users to dig into the set of operations
     * that are failing validation.
     *
     * Generated from protobuf field <code>string unexecutedOperationBody = 27;</code>
     */
    protected $unexecutedOperationBody = '';

    /** Generated from protobuf field <code>string unexecutedOperationName = 28;</code> */
    protected $unexecutedOperationName = '';

    /** Generated from protobuf field <code>.Trace.Details details = 6;</code> */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\Trace\Details $details = null;

    /** Generated from protobuf field <code>string client_name = 7;</code> */
    protected $client_name = '';

    /** Generated from protobuf field <code>string client_version = 8;</code> */
    protected $client_version = '';

    /** Generated from protobuf field <code>.Trace.HTTP http = 10;</code> */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\Trace\HTTP $http = null;

    /** Generated from protobuf field <code>.Trace.CachePolicy cache_policy = 18;</code> */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\Trace\CachePolicy $cache_policy = null;

    /**
     * If this Trace was created by a Router/Gateway, this is the query plan, including
     * sub-Traces for subgraphs. Note that the 'root' tree on the
     * top-level Trace won't contain any resolvers (though it could contain errors
     * that occurred in the Router/Gateway itself).
     *
     * Generated from protobuf field <code>.Trace.QueryPlanNode query_plan = 26;</code>
     */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode $query_plan = null;

    /**
     * Was this response served from a full query response cache?  (In that case
     * the node tree will have no resolvers.).
     *
     * Generated from protobuf field <code>bool full_query_cache_hit = 20;</code>
     */
    protected $full_query_cache_hit = false;

    /**
     * Was this query specified successfully as a persisted query hash?
     *
     * Generated from protobuf field <code>bool persisted_query_hit = 21;</code>
     */
    protected $persisted_query_hit = false;

    /**
     * Did this query contain both a full query string and a persisted query hash?
     * (This typically means that a previous request was rejected as an unknown
     * persisted query.).
     *
     * Generated from protobuf field <code>bool persisted_query_register = 22;</code>
     */
    protected $persisted_query_register = false;

    /**
     * Was this operation registered and a part of the safelist?
     *
     * Generated from protobuf field <code>bool registered_operation = 24;</code>
     */
    protected $registered_operation = false;

    /**
     * Was this operation forbidden due to lack of safelisting?
     *
     * Generated from protobuf field <code>bool forbidden_operation = 25;</code>
     */
    protected $forbidden_operation = false;

    /**
     * Some servers don't do field-level instrumentation for every request and assign
     * each request a "weight" for each request that they do instrument. When this
     * trace is aggregated into field usage stats, it should count as this value
     * towards the estimated_execution_count rather than just 1. This value should
     * typically be at least 1.
     * 0 is treated as 1 for backwards compatibility.
     *
     * Generated from protobuf field <code>double field_execution_weight = 31;</code>
     */
    protected $field_execution_weight = 0.0;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var \Google\Protobuf\Timestamp $start_time
     *           Wallclock time when the trace began
     *     @var \Google\Protobuf\Timestamp $end_time
     *           Wallclock time when the trace ended
     *     @var int|string $duration_ns
     *           High precision duration of the trace; may not equal end_time-start_time
     *           (eg, if your machine's clock changed during the trace)
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\Node $root
     *           A tree containing information about all resolvers run directly by this
     *           service, including errors
     *     @var bool $is_incomplete
     *           If this is true, the trace is potentially missing some nodes that were
     *           present on the query plan. This can happen if the trace span buffer used
     *           in the Router fills up and some spans have to be dropped. In these cases
     *           the overall trace timing will still be correct, but the trace data could
     *           be missing some referenced or executed fields, and some nodes may be
     *           missing. If this is true we should display a warning to the user when they
     *           view the trace in Explorer.
     *     @var string $signature
     *           In addition to details.raw_query, we include a "signature" of the query,
     *           which can be normalized: for example, you may want to discard aliases, drop
     *           unused operations and fragments, sort fields, etc. The most important thing
     *           here is that the signature match the signature in StatsReports. In
     *           StatsReports signatures show up as the key in the per_query map (with the
     *           operation name prepended).  The signature should be a valid GraphQL query.
     *           All traces must have a signature; if this Trace is in a FullTracesReport
     *           that signature is in the key of traces_per_query rather than in this field.
     *           Engineproxy provides the signature in legacy_signature_needs_resigning
     *           instead.
     *     @var string $unexecutedOperationBody
     *           Optional: when GraphQL parsing or validation against the GraphQL schema fails, these fields
     *           can include reference to the operation being sent for users to dig into the set of operations
     *           that are failing validation
     *     @var string $unexecutedOperationName
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\Details $details
     *     @var string $client_name
     *     @var string $client_version
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\HTTP $http
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\CachePolicy $cache_policy
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode $query_plan
     *           If this Trace was created by a Router/Gateway, this is the query plan, including
     *           sub-Traces for subgraphs. Note that the 'root' tree on the
     *           top-level Trace won't contain any resolvers (though it could contain errors
     *           that occurred in the Router/Gateway itself).
     *     @var bool $full_query_cache_hit
     *           Was this response served from a full query response cache?  (In that case
     *           the node tree will have no resolvers.)
     *     @var bool $persisted_query_hit
     *           Was this query specified successfully as a persisted query hash?
     *     @var bool $persisted_query_register
     *           Did this query contain both a full query string and a persisted query hash?
     *           (This typically means that a previous request was rejected as an unknown
     *           persisted query.)
     *     @var bool $registered_operation
     *           Was this operation registered and a part of the safelist?
     *     @var bool $forbidden_operation
     *           Was this operation forbidden due to lack of safelisting?
     *     @var float $field_execution_weight
     *           Some servers don't do field-level instrumentation for every request and assign
     *           each request a "weight" for each request that they do instrument. When this
     *           trace is aggregated into field usage stats, it should count as this value
     *           towards the estimated_execution_count rather than just 1. This value should
     *           typically be at least 1.
     *           0 is treated as 1 for backwards compatibility.
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * Wallclock time when the trace began.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 4;</code>
     */
    public function getStartTime(): ?\Google\Protobuf\Timestamp
    {
        return $this->start_time;
    }

    public function hasStartTime()
    {
        return isset($this->start_time);
    }

    public function clearStartTime(): void
    {
        unset($this->start_time);
    }

    /**
     * Wallclock time when the trace began.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 4;</code>
     *
     * @param  \Google\Protobuf\Timestamp  $var
     *
     * @return $this
     */
    public function setStartTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;

        return $this;
    }

    /**
     * Wallclock time when the trace ended.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 3;</code>
     */
    public function getEndTime(): ?\Google\Protobuf\Timestamp
    {
        return $this->end_time;
    }

    public function hasEndTime()
    {
        return isset($this->end_time);
    }

    public function clearEndTime(): void
    {
        unset($this->end_time);
    }

    /**
     * Wallclock time when the trace ended.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 3;</code>
     *
     * @param  \Google\Protobuf\Timestamp  $var
     *
     * @return $this
     */
    public function setEndTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;

        return $this;
    }

    /**
     * High precision duration of the trace; may not equal end_time-start_time
     * (eg, if your machine's clock changed during the trace).
     *
     * Generated from protobuf field <code>uint64 duration_ns = 11;</code>
     */
    public function getDurationNs(): int|string
    {
        return $this->duration_ns;
    }

    /**
     * High precision duration of the trace; may not equal end_time-start_time
     * (eg, if your machine's clock changed during the trace).
     *
     * Generated from protobuf field <code>uint64 duration_ns = 11;</code>
     *
     * @return $this
     */
    public function setDurationNs(int|string $var)
    {
        GPBUtil::checkUint64($var);
        $this->duration_ns = $var;

        return $this;
    }

    /**
     * A tree containing information about all resolvers run directly by this
     * service, including errors.
     *
     * Generated from protobuf field <code>.Trace.Node root = 14;</code>
     */
    public function getRoot(): ?Trace\Node
    {
        return $this->root;
    }

    public function hasRoot()
    {
        return isset($this->root);
    }

    public function clearRoot(): void
    {
        unset($this->root);
    }

    /**
     * A tree containing information about all resolvers run directly by this
     * service, including errors.
     *
     * Generated from protobuf field <code>.Trace.Node root = 14;</code>
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\Node  $var
     *
     * @return $this
     */
    public function setRoot($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\Node::class);
        $this->root = $var;

        return $this;
    }

    /**
     * If this is true, the trace is potentially missing some nodes that were
     * present on the query plan. This can happen if the trace span buffer used
     * in the Router fills up and some spans have to be dropped. In these cases
     * the overall trace timing will still be correct, but the trace data could
     * be missing some referenced or executed fields, and some nodes may be
     * missing. If this is true we should display a warning to the user when they
     * view the trace in Explorer.
     *
     * Generated from protobuf field <code>bool is_incomplete = 33;</code>
     *
     * @return bool
     */
    public function getIsIncomplete()
    {
        return $this->is_incomplete;
    }

    /**
     * If this is true, the trace is potentially missing some nodes that were
     * present on the query plan. This can happen if the trace span buffer used
     * in the Router fills up and some spans have to be dropped. In these cases
     * the overall trace timing will still be correct, but the trace data could
     * be missing some referenced or executed fields, and some nodes may be
     * missing. If this is true we should display a warning to the user when they
     * view the trace in Explorer.
     *
     * Generated from protobuf field <code>bool is_incomplete = 33;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setIsIncomplete($var)
    {
        GPBUtil::checkBool($var);
        $this->is_incomplete = $var;

        return $this;
    }

    /**
     * In addition to details.raw_query, we include a "signature" of the query,
     * which can be normalized: for example, you may want to discard aliases, drop
     * unused operations and fragments, sort fields, etc. The most important thing
     * here is that the signature match the signature in StatsReports. In
     * StatsReports signatures show up as the key in the per_query map (with the
     * operation name prepended).  The signature should be a valid GraphQL query.
     * All traces must have a signature; if this Trace is in a FullTracesReport
     * that signature is in the key of traces_per_query rather than in this field.
     * Engineproxy provides the signature in legacy_signature_needs_resigning
     * instead.
     *
     * Generated from protobuf field <code>string signature = 19;</code>
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * In addition to details.raw_query, we include a "signature" of the query,
     * which can be normalized: for example, you may want to discard aliases, drop
     * unused operations and fragments, sort fields, etc. The most important thing
     * here is that the signature match the signature in StatsReports. In
     * StatsReports signatures show up as the key in the per_query map (with the
     * operation name prepended).  The signature should be a valid GraphQL query.
     * All traces must have a signature; if this Trace is in a FullTracesReport
     * that signature is in the key of traces_per_query rather than in this field.
     * Engineproxy provides the signature in legacy_signature_needs_resigning
     * instead.
     *
     * Generated from protobuf field <code>string signature = 19;</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, true);
        $this->signature = $var;

        return $this;
    }

    /**
     * Optional: when GraphQL parsing or validation against the GraphQL schema fails, these fields
     * can include reference to the operation being sent for users to dig into the set of operations
     * that are failing validation.
     *
     * Generated from protobuf field <code>string unexecutedOperationBody = 27;</code>
     *
     * @return string
     */
    public function getUnexecutedOperationBody()
    {
        return $this->unexecutedOperationBody;
    }

    /**
     * Optional: when GraphQL parsing or validation against the GraphQL schema fails, these fields
     * can include reference to the operation being sent for users to dig into the set of operations
     * that are failing validation.
     *
     * Generated from protobuf field <code>string unexecutedOperationBody = 27;</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setUnexecutedOperationBody($var)
    {
        GPBUtil::checkString($var, true);
        $this->unexecutedOperationBody = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string unexecutedOperationName = 28;</code>.
     *
     * @return string
     */
    public function getUnexecutedOperationName()
    {
        return $this->unexecutedOperationName;
    }

    /**
     * Generated from protobuf field <code>string unexecutedOperationName = 28;</code>.
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setUnexecutedOperationName($var)
    {
        GPBUtil::checkString($var, true);
        $this->unexecutedOperationName = $var;

        return $this;
    }

    /** Generated from protobuf field <code>.Trace.Details details = 6;</code> */
    public function getDetails(): ?Trace\Details
    {
        return $this->details;
    }

    public function hasDetails()
    {
        return isset($this->details);
    }

    public function clearDetails(): void
    {
        unset($this->details);
    }

    /**
     * Generated from protobuf field <code>.Trace.Details details = 6;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\Details  $var
     *
     * @return $this
     */
    public function setDetails($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\Details::class);
        $this->details = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string client_name = 7;</code>.
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->client_name;
    }

    /**
     * Generated from protobuf field <code>string client_name = 7;</code>.
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setClientName($var)
    {
        GPBUtil::checkString($var, true);
        $this->client_name = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string client_version = 8;</code>.
     *
     * @return string
     */
    public function getClientVersion()
    {
        return $this->client_version;
    }

    /**
     * Generated from protobuf field <code>string client_version = 8;</code>.
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setClientVersion($var)
    {
        GPBUtil::checkString($var, true);
        $this->client_version = $var;

        return $this;
    }

    /** Generated from protobuf field <code>.Trace.HTTP http = 10;</code> */
    public function getHttp(): ?Trace\HTTP
    {
        return $this->http;
    }

    public function hasHttp()
    {
        return isset($this->http);
    }

    public function clearHttp(): void
    {
        unset($this->http);
    }

    /**
     * Generated from protobuf field <code>.Trace.HTTP http = 10;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\HTTP  $var
     *
     * @return $this
     */
    public function setHttp($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\HTTP::class);
        $this->http = $var;

        return $this;
    }

    /** Generated from protobuf field <code>.Trace.CachePolicy cache_policy = 18;</code> */
    public function getCachePolicy(): ?Trace\CachePolicy
    {
        return $this->cache_policy;
    }

    public function hasCachePolicy()
    {
        return isset($this->cache_policy);
    }

    public function clearCachePolicy(): void
    {
        unset($this->cache_policy);
    }

    /**
     * Generated from protobuf field <code>.Trace.CachePolicy cache_policy = 18;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\CachePolicy  $var
     *
     * @return $this
     */
    public function setCachePolicy($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\CachePolicy::class);
        $this->cache_policy = $var;

        return $this;
    }

    /**
     * If this Trace was created by a Router/Gateway, this is the query plan, including
     * sub-Traces for subgraphs. Note that the 'root' tree on the
     * top-level Trace won't contain any resolvers (though it could contain errors
     * that occurred in the Router/Gateway itself).
     *
     * Generated from protobuf field <code>.Trace.QueryPlanNode query_plan = 26;</code>
     */
    public function getQueryPlan(): ?Trace\QueryPlanNode
    {
        return $this->query_plan;
    }

    public function hasQueryPlan()
    {
        return isset($this->query_plan);
    }

    public function clearQueryPlan(): void
    {
        unset($this->query_plan);
    }

    /**
     * If this Trace was created by a Router/Gateway, this is the query plan, including
     * sub-Traces for subgraphs. Note that the 'root' tree on the
     * top-level Trace won't contain any resolvers (though it could contain errors
     * that occurred in the Router/Gateway itself).
     *
     * Generated from protobuf field <code>.Trace.QueryPlanNode query_plan = 26;</code>
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode  $var
     *
     * @return $this
     */
    public function setQueryPlan($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode::class);
        $this->query_plan = $var;

        return $this;
    }

    /**
     * Was this response served from a full query response cache?  (In that case
     * the node tree will have no resolvers.).
     *
     * Generated from protobuf field <code>bool full_query_cache_hit = 20;</code>
     *
     * @return bool
     */
    public function getFullQueryCacheHit()
    {
        return $this->full_query_cache_hit;
    }

    /**
     * Was this response served from a full query response cache?  (In that case
     * the node tree will have no resolvers.).
     *
     * Generated from protobuf field <code>bool full_query_cache_hit = 20;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setFullQueryCacheHit($var)
    {
        GPBUtil::checkBool($var);
        $this->full_query_cache_hit = $var;

        return $this;
    }

    /**
     * Was this query specified successfully as a persisted query hash?
     *
     * Generated from protobuf field <code>bool persisted_query_hit = 21;</code>
     *
     * @return bool
     */
    public function getPersistedQueryHit()
    {
        return $this->persisted_query_hit;
    }

    /**
     * Was this query specified successfully as a persisted query hash?
     *
     * Generated from protobuf field <code>bool persisted_query_hit = 21;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setPersistedQueryHit($var)
    {
        GPBUtil::checkBool($var);
        $this->persisted_query_hit = $var;

        return $this;
    }

    /**
     * Did this query contain both a full query string and a persisted query hash?
     * (This typically means that a previous request was rejected as an unknown
     * persisted query.).
     *
     * Generated from protobuf field <code>bool persisted_query_register = 22;</code>
     *
     * @return bool
     */
    public function getPersistedQueryRegister()
    {
        return $this->persisted_query_register;
    }

    /**
     * Did this query contain both a full query string and a persisted query hash?
     * (This typically means that a previous request was rejected as an unknown
     * persisted query.).
     *
     * Generated from protobuf field <code>bool persisted_query_register = 22;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setPersistedQueryRegister($var)
    {
        GPBUtil::checkBool($var);
        $this->persisted_query_register = $var;

        return $this;
    }

    /**
     * Was this operation registered and a part of the safelist?
     *
     * Generated from protobuf field <code>bool registered_operation = 24;</code>
     *
     * @return bool
     */
    public function getRegisteredOperation()
    {
        return $this->registered_operation;
    }

    /**
     * Was this operation registered and a part of the safelist?
     *
     * Generated from protobuf field <code>bool registered_operation = 24;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setRegisteredOperation($var)
    {
        GPBUtil::checkBool($var);
        $this->registered_operation = $var;

        return $this;
    }

    /**
     * Was this operation forbidden due to lack of safelisting?
     *
     * Generated from protobuf field <code>bool forbidden_operation = 25;</code>
     *
     * @return bool
     */
    public function getForbiddenOperation()
    {
        return $this->forbidden_operation;
    }

    /**
     * Was this operation forbidden due to lack of safelisting?
     *
     * Generated from protobuf field <code>bool forbidden_operation = 25;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setForbiddenOperation($var)
    {
        GPBUtil::checkBool($var);
        $this->forbidden_operation = $var;

        return $this;
    }

    /**
     * Some servers don't do field-level instrumentation for every request and assign
     * each request a "weight" for each request that they do instrument. When this
     * trace is aggregated into field usage stats, it should count as this value
     * towards the estimated_execution_count rather than just 1. This value should
     * typically be at least 1.
     * 0 is treated as 1 for backwards compatibility.
     *
     * Generated from protobuf field <code>double field_execution_weight = 31;</code>
     *
     * @return float
     */
    public function getFieldExecutionWeight()
    {
        return $this->field_execution_weight;
    }

    /**
     * Some servers don't do field-level instrumentation for every request and assign
     * each request a "weight" for each request that they do instrument. When this
     * trace is aggregated into field usage stats, it should count as this value
     * towards the estimated_execution_count rather than just 1. This value should
     * typically be at least 1.
     * 0 is treated as 1 for backwards compatibility.
     *
     * Generated from protobuf field <code>double field_execution_weight = 31;</code>
     *
     * @param  float  $var
     *
     * @return $this
     */
    public function setFieldExecutionWeight($var)
    {
        GPBUtil::checkDouble($var);
        $this->field_execution_weight = $var;

        return $this;
    }
}

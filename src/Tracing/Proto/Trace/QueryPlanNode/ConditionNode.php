<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Trace.QueryPlanNode.ConditionNode</code>.
 */
class ConditionNode extends \Google\Protobuf\Internal\Message
{
    /** Generated from protobuf field <code>string condition = 1;</code> */
    protected $condition = '';

    /** Generated from protobuf field <code>.Trace.QueryPlanNode if_clause = 2;</code> */
    protected $if_clause;

    /** Generated from protobuf field <code>.Trace.QueryPlanNode else_clause = 3;</code> */
    protected $else_clause;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var string $condition
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode $if_clause
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode $else_clause
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string condition = 1;</code>.
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * Generated from protobuf field <code>string condition = 1;</code>.
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setCondition($var)
    {
        GPBUtil::checkString($var, true);
        $this->condition = $var;

        return $this;
    }

    /** Generated from protobuf field <code>.Trace.QueryPlanNode if_clause = 2;</code> */
    public function getIfClause(): ?\Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode
    {
        return $this->if_clause;
    }

    public function hasIfClause()
    {
        return isset($this->if_clause);
    }

    public function clearIfClause(): void
    {
        unset($this->if_clause);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode if_clause = 2;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode  $var
     *
     * @return $this
     */
    public function setIfClause($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode::class);
        $this->if_clause = $var;

        return $this;
    }

    /** Generated from protobuf field <code>.Trace.QueryPlanNode else_clause = 3;</code> */
    public function getElseClause(): ?\Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode
    {
        return $this->else_clause;
    }

    public function hasElseClause()
    {
        return isset($this->else_clause);
    }

    public function clearElseClause(): void
    {
        unset($this->else_clause);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode else_clause = 3;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode  $var
     *
     * @return $this
     */
    public function setElseClause($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode::class);
        $this->else_clause = $var;

        return $this;
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ConditionNode::class, \Nuwave\Lighthouse\Tracing\Proto\Trace_QueryPlanNode_ConditionNode::class);

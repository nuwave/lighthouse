<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode;

use Google\Protobuf\Internal\GPBUtil;

/**
 * A `DeferNode` corresponds to one or more &#64;defer at the same level of "nestedness" in the planned query.
 *
 * Generated from protobuf message <code>Trace.QueryPlanNode.DeferNode</code>
 */
class DeferNode extends \Google\Protobuf\Internal\Message
{
    /** Generated from protobuf field <code>.Trace.QueryPlanNode.DeferNodePrimary primary = 1;</code> */
    protected $primary;

    /** Generated from protobuf field <code>repeated .Trace.QueryPlanNode.DeferredNode deferred = 2;</code> */
    private $deferred;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferNodePrimary $primary
     *     @var array<\Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferredNode>|\Google\Protobuf\Internal\RepeatedField $deferred
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /** Generated from protobuf field <code>.Trace.QueryPlanNode.DeferNodePrimary primary = 1;</code> */
    public function getPrimary(): ?DeferNodePrimary
    {
        return $this->primary;
    }

    public function hasPrimary()
    {
        return isset($this->primary);
    }

    public function clearPrimary(): void
    {
        unset($this->primary);
    }

    /**
     * Generated from protobuf field <code>.Trace.QueryPlanNode.DeferNodePrimary primary = 1;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferNodePrimary  $var
     *
     * @return $this
     */
    public function setPrimary($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferNodePrimary::class);
        $this->primary = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .Trace.QueryPlanNode.DeferredNode deferred = 2;</code>.
     *
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDeferred()
    {
        return $this->deferred;
    }

    /**
     * Generated from protobuf field <code>repeated .Trace.QueryPlanNode.DeferredNode deferred = 2;</code>.
     *
     * @param  array<\Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferredNode>|\Google\Protobuf\Internal\RepeatedField  $var
     *
     * @return $this
     */
    public function setDeferred(array|\Google\Protobuf\Internal\RepeatedField $var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Nuwave\Lighthouse\Tracing\Proto\Trace\QueryPlanNode\DeferredNode::class);
        $this->deferred = $arr;

        return $this;
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DeferNode::class, \Nuwave\Lighthouse\Tracing\Proto\Trace_QueryPlanNode_DeferNode::class);

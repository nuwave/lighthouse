<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\Proto\Trace;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Trace.Details</code>.
 */
class Details extends \Google\Protobuf\Internal\Message
{
    /**
     * The variables associated with this query (unless the reporting agent is
     * configured to keep them all private). Values are JSON: ie, strings are
     * enclosed in double quotes, etc.  The value of a private variable is
     * the empty string.
     *
     * Generated from protobuf field <code>map<string, string> variables_json = 4;</code>
     */
    private $variables_json;

    /**
     * This is deprecated and only used for legacy applications
     * don't include this in traces inside a FullTracesReport; the operation
     * name for these traces comes from the key of the traces_per_query map.
     *
     * Generated from protobuf field <code>string operation_name = 3;</code>
     */
    protected $operation_name = '';

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var array|\Google\Protobuf\Internal\MapField $variables_json
     *           The variables associated with this query (unless the reporting agent is
     *           configured to keep them all private). Values are JSON: ie, strings are
     *           enclosed in double quotes, etc.  The value of a private variable is
     *           the empty string.
     *     @var string $operation_name
     *           This is deprecated and only used for legacy applications
     *           don't include this in traces inside a FullTracesReport; the operation
     *           name for these traces comes from the key of the traces_per_query map.
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * The variables associated with this query (unless the reporting agent is
     * configured to keep them all private). Values are JSON: ie, strings are
     * enclosed in double quotes, etc.  The value of a private variable is
     * the empty string.
     *
     * Generated from protobuf field <code>map<string, string> variables_json = 4;</code>
     *
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getVariablesJson()
    {
        return $this->variables_json;
    }

    /**
     * The variables associated with this query (unless the reporting agent is
     * configured to keep them all private). Values are JSON: ie, strings are
     * enclosed in double quotes, etc.  The value of a private variable is
     * the empty string.
     *
     * Generated from protobuf field <code>map<string, string> variables_json = 4;</code>
     *
     * @return $this
     */
    public function setVariablesJson(array|\Google\Protobuf\Internal\MapField $var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->variables_json = $arr;

        return $this;
    }

    /**
     * This is deprecated and only used for legacy applications
     * don't include this in traces inside a FullTracesReport; the operation
     * name for these traces comes from the key of the traces_per_query map.
     *
     * Generated from protobuf field <code>string operation_name = 3;</code>
     *
     * @return string
     */
    public function getOperationName()
    {
        return $this->operation_name;
    }

    /**
     * This is deprecated and only used for legacy applications
     * don't include this in traces inside a FullTracesReport; the operation
     * name for these traces comes from the key of the traces_per_query map.
     *
     * Generated from protobuf field <code>string operation_name = 3;</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setOperationName($var)
    {
        GPBUtil::checkString($var, true);
        $this->operation_name = $var;

        return $this;
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Details::class, \Nuwave\Lighthouse\Tracing\Proto\Trace_Details::class);

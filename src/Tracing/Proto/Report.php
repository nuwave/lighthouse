<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\Proto;

use Google\Protobuf\Internal\GPBUtil;

/**
 * This is the top-level message used by the new traces ingress. This
 * is designed for the apollo-engine-reporting TypeScript agent and will
 * eventually be documented as a public ingress API. This message consists
 * solely of traces; the equivalent of the StatsReport is automatically
 * generated server-side from this message. Agent should either send a trace or include it in the stats
 * for every request in this report. Generally, buffering up until a large
 * size has been reached (say, 4MB) or 5-10 seconds has passed is appropriate.
 * This message used to be know as FullTracesReport, but got renamed since it isn't just for traces anymore.
 *
 * Generated from protobuf message <code>Report</code>
 */
class Report extends \Google\Protobuf\Internal\Message
{
    /** Generated from protobuf field <code>.ReportHeader header = 1;</code> */
    protected ?\Nuwave\Lighthouse\Tracing\Proto\ReportHeader $header = null;

    /**
     * key is statsReportKey (# operationName\nsignature) Note that the nested
     * traces will *not* have a signature or details.operationName (because the
     * key is adequate).
     * We also assume that traces don't have
     * legacy_per_query_implicit_operation_name, and we don't require them to have
     * details.raw_query (which would consume a lot of space and has privacy/data
     * access issues, and isn't currently exposed by our app anyway).
     *
     * Generated from protobuf field <code>map<string, .TracesAndStats> traces_per_query = 5;</code>
     */
    private $traces_per_query;

    /**
     * This is the time that the requests in this trace are considered to have taken place
     * If this field is not present the max of the end_time of each trace will be used instead.
     * If there are no traces and no end_time present the report will not be able to be processed.
     * Note: This will override the end_time from traces.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 2;</code>
     */
    protected ?\Google\Protobuf\Timestamp $end_time = null;

    /**
     * Total number of operations processed during this period.
     *
     * Generated from protobuf field <code>uint64 operation_count = 6;</code>
     */
    protected $operation_count = 0;

    /**
     * If this is set to true, the stats in TracesWithStats.stats_with_context
     * represent all of the operations described from this report, and the
     * traces in TracesWithStats.trace are a sampling of some of the same
     * operations. If this is false, each operation is described in precisely
     * one of those two fields.
     *
     * Generated from protobuf field <code>bool traces_pre_aggregated = 7;</code>
     */
    protected $traces_pre_aggregated = false;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var \Nuwave\Lighthouse\Tracing\Proto\ReportHeader $header
     *     @var array|\Google\Protobuf\Internal\MapField $traces_per_query
     *           key is statsReportKey (# operationName\nsignature) Note that the nested
     *           traces will *not* have a signature or details.operationName (because the
     *           key is adequate).
     *           We also assume that traces don't have
     *           legacy_per_query_implicit_operation_name, and we don't require them to have
     *           details.raw_query (which would consume a lot of space and has privacy/data
     *           access issues, and isn't currently exposed by our app anyway).
     *     @var \Google\Protobuf\Timestamp $end_time
     *           This is the time that the requests in this trace are considered to have taken place
     *           If this field is not present the max of the end_time of each trace will be used instead.
     *           If there are no traces and no end_time present the report will not be able to be processed.
     *           Note: This will override the end_time from traces.
     *     @var int|string $operation_count
     *           Total number of operations processed during this period
     *     @var bool $traces_pre_aggregated
     *           If this is set to true, the stats in TracesWithStats.stats_with_context
     *           represent all of the operations described from this report, and the
     *           traces in TracesWithStats.trace are a sampling of some of the same
     *           operations. If this is false, each operation is described in precisely
     *           one of those two fields.
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /** Generated from protobuf field <code>.ReportHeader header = 1;</code> */
    public function getHeader(): ?ReportHeader
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader(): void
    {
        unset($this->header);
    }

    /**
     * Generated from protobuf field <code>.ReportHeader header = 1;</code>.
     *
     * @param  \Nuwave\Lighthouse\Tracing\Proto\ReportHeader  $var
     *
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Nuwave\Lighthouse\Tracing\Proto\ReportHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     * key is statsReportKey (# operationName\nsignature) Note that the nested
     * traces will *not* have a signature or details.operationName (because the
     * key is adequate).
     * We also assume that traces don't have
     * legacy_per_query_implicit_operation_name, and we don't require them to have
     * details.raw_query (which would consume a lot of space and has privacy/data
     * access issues, and isn't currently exposed by our app anyway).
     *
     * Generated from protobuf field <code>map<string, .TracesAndStats> traces_per_query = 5;</code>
     *
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getTracesPerQuery()
    {
        return $this->traces_per_query;
    }

    /**
     * key is statsReportKey (# operationName\nsignature) Note that the nested
     * traces will *not* have a signature or details.operationName (because the
     * key is adequate).
     * We also assume that traces don't have
     * legacy_per_query_implicit_operation_name, and we don't require them to have
     * details.raw_query (which would consume a lot of space and has privacy/data
     * access issues, and isn't currently exposed by our app anyway).
     *
     * Generated from protobuf field <code>map<string, .TracesAndStats> traces_per_query = 5;</code>
     *
     * @return $this
     */
    public function setTracesPerQuery(array|\Google\Protobuf\Internal\MapField $var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::MESSAGE, \Nuwave\Lighthouse\Tracing\Proto\TracesAndStats::class);
        $this->traces_per_query = $arr;

        return $this;
    }

    /**
     * This is the time that the requests in this trace are considered to have taken place
     * If this field is not present the max of the end_time of each trace will be used instead.
     * If there are no traces and no end_time present the report will not be able to be processed.
     * Note: This will override the end_time from traces.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 2;</code>
     */
    public function getEndTime(): ?\Google\Protobuf\Timestamp
    {
        return $this->end_time;
    }

    public function hasEndTime()
    {
        return isset($this->end_time);
    }

    public function clearEndTime(): void
    {
        unset($this->end_time);
    }

    /**
     * This is the time that the requests in this trace are considered to have taken place
     * If this field is not present the max of the end_time of each trace will be used instead.
     * If there are no traces and no end_time present the report will not be able to be processed.
     * Note: This will override the end_time from traces.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 2;</code>
     *
     * @param  \Google\Protobuf\Timestamp  $var
     *
     * @return $this
     */
    public function setEndTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;

        return $this;
    }

    /**
     * Total number of operations processed during this period.
     *
     * Generated from protobuf field <code>uint64 operation_count = 6;</code>
     */
    public function getOperationCount(): int|string
    {
        return $this->operation_count;
    }

    /**
     * Total number of operations processed during this period.
     *
     * Generated from protobuf field <code>uint64 operation_count = 6;</code>
     *
     * @return $this
     */
    public function setOperationCount(int|string $var)
    {
        GPBUtil::checkUint64($var);
        $this->operation_count = $var;

        return $this;
    }

    /**
     * If this is set to true, the stats in TracesWithStats.stats_with_context
     * represent all of the operations described from this report, and the
     * traces in TracesWithStats.trace are a sampling of some of the same
     * operations. If this is false, each operation is described in precisely
     * one of those two fields.
     *
     * Generated from protobuf field <code>bool traces_pre_aggregated = 7;</code>
     *
     * @return bool
     */
    public function getTracesPreAggregated()
    {
        return $this->traces_pre_aggregated;
    }

    /**
     * If this is set to true, the stats in TracesWithStats.stats_with_context
     * represent all of the operations described from this report, and the
     * traces in TracesWithStats.trace are a sampling of some of the same
     * operations. If this is false, each operation is described in precisely
     * one of those two fields.
     *
     * Generated from protobuf field <code>bool traces_pre_aggregated = 7;</code>
     *
     * @param  bool  $var
     *
     * @return $this
     */
    public function setTracesPreAggregated($var)
    {
        GPBUtil::checkBool($var);
        $this->traces_pre_aggregated = $var;

        return $this;
    }
}

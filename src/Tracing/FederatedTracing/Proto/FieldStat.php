<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/FederatedTracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\FederatedTracing\Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>FieldStat</code>.
 */
class FieldStat extends \Google\Protobuf\Internal\Message
{
    /**
     * required; eg "String!" for User.email:String!
     *
     * Generated from protobuf field <code>string return_type = 3 [json_name = "returnType"];</code>
     */
    protected $return_type = '';

    /**
     * Number of errors whose path is this field. Note that we assume that error
     * tracking does *not* require field-level instrumentation so this *will*
     * include errors from requests that don't contribute to the
     * `observed_execution_count` field (and does not need to be scaled by
     * field_execution_weight).
     *
     * Generated from protobuf field <code>uint64 errors_count = 4 [json_name = "errorsCount"];</code>
     */
    protected $errors_count = 0;

    /**
     * Number of times that the resolver for this field is directly observed being
     * executed.
     *
     * Generated from protobuf field <code>uint64 observed_execution_count = 5 [json_name = "observedExecutionCount"];</code>
     */
    protected $observed_execution_count = 0;

    /**
     * Same as `observed_execution_count` but potentially scaled upwards if the server was only
     * performing field-level instrumentation on a sampling of operations.  For
     * example, if the server randomly instruments 1% of requests for this
     * operation, this number will be 100 times greater than
     * `observed_execution_count`. (When aggregating a Trace into FieldStats,
     * this number goes up by the trace's `field_execution_weight` for each
     * observed field execution, while `observed_execution_count` above goes
     * up by 1.).
     *
     * Generated from protobuf field <code>uint64 estimated_execution_count = 10 [json_name = "estimatedExecutionCount"];</code>
     */
    protected $estimated_execution_count = 0;

    /**
     * Number of times the resolver for this field is executed that resulted in
     * at least one error. "Request" is a misnomer here as this corresponds to
     * resolver calls, not overall operations. Like `errors_count` above, this
     * includes all requests rather than just requests with field-level
     * instrumentation.
     *
     * Generated from protobuf field <code>uint64 requests_with_errors_count = 6 [json_name = "requestsWithErrorsCount"];</code>
     */
    protected $requests_with_errors_count = 0;

    /**
     * Duration histogram for the latency of this field. Note that it is scaled in
     * the same way as estimated_execution_count so its "total count" might be
     * greater than `observed_execution_count` and may not exactly equal
     * `estimated_execution_count` due to rounding.
     * See comment on QueryLatencyStats's latency_count for details.
     *
     * Generated from protobuf field <code>repeated sint64 latency_count = 9 [json_name = "latencyCount"];</code>
     */
    private $latency_count;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var string $return_type
     *           required; eg "String!" for User.email:String!
     *     @var int|string $errors_count
     *           Number of errors whose path is this field. Note that we assume that error
     *           tracking does *not* require field-level instrumentation so this *will*
     *           include errors from requests that don't contribute to the
     *           `observed_execution_count` field (and does not need to be scaled by
     *           field_execution_weight).
     *     @var int|string $observed_execution_count
     *           Number of times that the resolver for this field is directly observed being
     *           executed
     *     @var int|string $estimated_execution_count
     *           Same as `observed_execution_count` but potentially scaled upwards if the server was only
     *           performing field-level instrumentation on a sampling of operations.  For
     *           example, if the server randomly instruments 1% of requests for this
     *           operation, this number will be 100 times greater than
     *           `observed_execution_count`. (When aggregating a Trace into FieldStats,
     *           this number goes up by the trace's `field_execution_weight` for each
     *           observed field execution, while `observed_execution_count` above goes
     *           up by 1.)
     *     @var int|string $requests_with_errors_count
     *           Number of times the resolver for this field is executed that resulted in
     *           at least one error. "Request" is a misnomer here as this corresponds to
     *           resolver calls, not overall operations. Like `errors_count` above, this
     *           includes all requests rather than just requests with field-level
     *           instrumentation.
     *     @var array<int>|array<string>|\Google\Protobuf\Internal\RepeatedField $latency_count
     *           Duration histogram for the latency of this field. Note that it is scaled in
     *           the same way as estimated_execution_count so its "total count" might be
     *           greater than `observed_execution_count` and may not exactly equal
     *           `estimated_execution_count` due to rounding.
     *           See comment on QueryLatencyStats's latency_count for details.
     * }
     */
    public function __construct($data = null)
    {
        Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * required; eg "String!" for User.email:String!
     *
     * Generated from protobuf field <code>string return_type = 3 [json_name = "returnType"];</code>
     *
     * @return string
     */
    public function getReturnType()
    {
        return $this->return_type;
    }

    /**
     * required; eg "String!" for User.email:String!
     *
     * Generated from protobuf field <code>string return_type = 3 [json_name = "returnType"];</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setReturnType($var)
    {
        GPBUtil::checkString($var, true);
        $this->return_type = $var;

        return $this;
    }

    /**
     * Number of errors whose path is this field. Note that we assume that error
     * tracking does *not* require field-level instrumentation so this *will*
     * include errors from requests that don't contribute to the
     * `observed_execution_count` field (and does not need to be scaled by
     * field_execution_weight).
     *
     * Generated from protobuf field <code>uint64 errors_count = 4 [json_name = "errorsCount"];</code>
     *
     * @return int|string
     */
    public function getErrorsCount()
    {
        return $this->errors_count;
    }

    /**
     * Number of errors whose path is this field. Note that we assume that error
     * tracking does *not* require field-level instrumentation so this *will*
     * include errors from requests that don't contribute to the
     * `observed_execution_count` field (and does not need to be scaled by
     * field_execution_weight).
     *
     * Generated from protobuf field <code>uint64 errors_count = 4 [json_name = "errorsCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setErrorsCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->errors_count = $var;

        return $this;
    }

    /**
     * Number of times that the resolver for this field is directly observed being
     * executed.
     *
     * Generated from protobuf field <code>uint64 observed_execution_count = 5 [json_name = "observedExecutionCount"];</code>
     *
     * @return int|string
     */
    public function getObservedExecutionCount()
    {
        return $this->observed_execution_count;
    }

    /**
     * Number of times that the resolver for this field is directly observed being
     * executed.
     *
     * Generated from protobuf field <code>uint64 observed_execution_count = 5 [json_name = "observedExecutionCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setObservedExecutionCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->observed_execution_count = $var;

        return $this;
    }

    /**
     * Same as `observed_execution_count` but potentially scaled upwards if the server was only
     * performing field-level instrumentation on a sampling of operations.  For
     * example, if the server randomly instruments 1% of requests for this
     * operation, this number will be 100 times greater than
     * `observed_execution_count`. (When aggregating a Trace into FieldStats,
     * this number goes up by the trace's `field_execution_weight` for each
     * observed field execution, while `observed_execution_count` above goes
     * up by 1.).
     *
     * Generated from protobuf field <code>uint64 estimated_execution_count = 10 [json_name = "estimatedExecutionCount"];</code>
     *
     * @return int|string
     */
    public function getEstimatedExecutionCount()
    {
        return $this->estimated_execution_count;
    }

    /**
     * Same as `observed_execution_count` but potentially scaled upwards if the server was only
     * performing field-level instrumentation on a sampling of operations.  For
     * example, if the server randomly instruments 1% of requests for this
     * operation, this number will be 100 times greater than
     * `observed_execution_count`. (When aggregating a Trace into FieldStats,
     * this number goes up by the trace's `field_execution_weight` for each
     * observed field execution, while `observed_execution_count` above goes
     * up by 1.).
     *
     * Generated from protobuf field <code>uint64 estimated_execution_count = 10 [json_name = "estimatedExecutionCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setEstimatedExecutionCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->estimated_execution_count = $var;

        return $this;
    }

    /**
     * Number of times the resolver for this field is executed that resulted in
     * at least one error. "Request" is a misnomer here as this corresponds to
     * resolver calls, not overall operations. Like `errors_count` above, this
     * includes all requests rather than just requests with field-level
     * instrumentation.
     *
     * Generated from protobuf field <code>uint64 requests_with_errors_count = 6 [json_name = "requestsWithErrorsCount"];</code>
     *
     * @return int|string
     */
    public function getRequestsWithErrorsCount()
    {
        return $this->requests_with_errors_count;
    }

    /**
     * Number of times the resolver for this field is executed that resulted in
     * at least one error. "Request" is a misnomer here as this corresponds to
     * resolver calls, not overall operations. Like `errors_count` above, this
     * includes all requests rather than just requests with field-level
     * instrumentation.
     *
     * Generated from protobuf field <code>uint64 requests_with_errors_count = 6 [json_name = "requestsWithErrorsCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setRequestsWithErrorsCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->requests_with_errors_count = $var;

        return $this;
    }

    /**
     * Duration histogram for the latency of this field. Note that it is scaled in
     * the same way as estimated_execution_count so its "total count" might be
     * greater than `observed_execution_count` and may not exactly equal
     * `estimated_execution_count` due to rounding.
     * See comment on QueryLatencyStats's latency_count for details.
     *
     * Generated from protobuf field <code>repeated sint64 latency_count = 9 [json_name = "latencyCount"];</code>
     *
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLatencyCount()
    {
        return $this->latency_count;
    }

    /**
     * Duration histogram for the latency of this field. Note that it is scaled in
     * the same way as estimated_execution_count so its "total count" might be
     * greater than `observed_execution_count` and may not exactly equal
     * `estimated_execution_count` due to rounding.
     * See comment on QueryLatencyStats's latency_count for details.
     *
     * Generated from protobuf field <code>repeated sint64 latency_count = 9 [json_name = "latencyCount"];</code>
     *
     * @param  array<int>|array<string>|\Google\Protobuf\Internal\RepeatedField  $var
     *
     * @return $this
     */
    public function setLatencyCount($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, GPBType::SINT64);
        $this->latency_count = $arr;

        return $this;
    }
}

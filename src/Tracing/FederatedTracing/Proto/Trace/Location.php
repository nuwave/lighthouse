<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/FederatedTracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Trace.Location</code>.
 */
class Location extends \Google\Protobuf\Internal\Message
{
    /** Generated from protobuf field <code>uint32 line = 1 [json_name = "line"];</code> */
    protected $line = 0;

    /** Generated from protobuf field <code>uint32 column = 2 [json_name = "column"];</code> */
    protected $column = 0;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var int $line
     *     @var int $column
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>uint32 line = 1 [json_name = "line"];</code>.
     *
     * @return int
     */
    public function getLine()
    {
        return $this->line;
    }

    /**
     * Generated from protobuf field <code>uint32 line = 1 [json_name = "line"];</code>.
     *
     * @param  int  $var
     *
     * @return $this
     */
    public function setLine($var)
    {
        GPBUtil::checkUint32($var);
        $this->line = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 column = 2 [json_name = "column"];</code>.
     *
     * @return int
     */
    public function getColumn()
    {
        return $this->column;
    }

    /**
     * Generated from protobuf field <code>uint32 column = 2 [json_name = "column"];</code>.
     *
     * @param  int  $var
     *
     * @return $this
     */
    public function setColumn($var)
    {
        GPBUtil::checkUint32($var);
        $this->column = $var;

        return $this;
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Location::class, \Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace_Location::class);

<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/FederatedTracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace;

use Google\Protobuf\Internal\GPBUtil;

/**
 * The cost of the operation.
 *
 * Generated from protobuf message <code>Trace.Limits</code>
 */
class Limits extends \Google\Protobuf\Internal\Message
{
    /**
     * The result of the operation.
     *
     * Generated from protobuf field <code>string result = 1 [json_name = "result"];</code>
     */
    protected $result = '';

    /**
     * The strategy used in cost calculations.
     *
     * Generated from protobuf field <code>string strategy = 2 [json_name = "strategy"];</code>
     */
    protected $strategy = '';

    /**
     * The estimated cost as calculated via the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_estimated = 3 [json_name = "costEstimated"];</code>
     */
    protected $cost_estimated = 0;

    /**
     * The actual cost using the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_actual = 4 [json_name = "costActual"];</code>
     */
    protected $cost_actual = 0;

    /**
     * The depth of the query.
     *
     * Generated from protobuf field <code>uint64 depth = 5 [json_name = "depth"];</code>
     */
    protected $depth = 0;

    /**
     * The height of the query.
     *
     * Generated from protobuf field <code>uint64 height = 6 [json_name = "height"];</code>
     */
    protected $height = 0;

    /**
     * The number of aliases in the query.
     *
     * Generated from protobuf field <code>uint64 alias_count = 7 [json_name = "aliasCount"];</code>
     */
    protected $alias_count = 0;

    /**
     * The number of root fields in the query.
     *
     * Generated from protobuf field <code>uint64 root_field_count = 8 [json_name = "rootFieldCount"];</code>
     */
    protected $root_field_count = 0;

    /**
     * Constructor.
     *
     * @param  array  $data {
     *     Optional. Data for populating the Message object.
     *
     *     @var string $result
     *           The result of the operation
     *     @var string $strategy
     *           The strategy used in cost calculations
     *     @var int|string $cost_estimated
     *           The estimated cost as calculated via the strategy specified in strategy
     *     @var int|string $cost_actual
     *           The actual cost using the strategy specified in strategy
     *     @var int|string $depth
     *           The depth of the query
     *     @var int|string $height
     *           The height of the query
     *     @var int|string $alias_count
     *           The number of aliases in the query
     *     @var int|string $root_field_count
     *           The number of root fields in the query
     * }
     */
    public function __construct($data = null)
    {
        \Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Metadata\Reports::initOnce();
        parent::__construct($data);
    }

    /**
     * The result of the operation.
     *
     * Generated from protobuf field <code>string result = 1 [json_name = "result"];</code>
     *
     * @return string
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * The result of the operation.
     *
     * Generated from protobuf field <code>string result = 1 [json_name = "result"];</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setResult($var)
    {
        GPBUtil::checkString($var, true);
        $this->result = $var;

        return $this;
    }

    /**
     * The strategy used in cost calculations.
     *
     * Generated from protobuf field <code>string strategy = 2 [json_name = "strategy"];</code>
     *
     * @return string
     */
    public function getStrategy()
    {
        return $this->strategy;
    }

    /**
     * The strategy used in cost calculations.
     *
     * Generated from protobuf field <code>string strategy = 2 [json_name = "strategy"];</code>
     *
     * @param  string  $var
     *
     * @return $this
     */
    public function setStrategy($var)
    {
        GPBUtil::checkString($var, true);
        $this->strategy = $var;

        return $this;
    }

    /**
     * The estimated cost as calculated via the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_estimated = 3 [json_name = "costEstimated"];</code>
     *
     * @return int|string
     */
    public function getCostEstimated()
    {
        return $this->cost_estimated;
    }

    /**
     * The estimated cost as calculated via the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_estimated = 3 [json_name = "costEstimated"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setCostEstimated($var)
    {
        GPBUtil::checkUint64($var);
        $this->cost_estimated = $var;

        return $this;
    }

    /**
     * The actual cost using the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_actual = 4 [json_name = "costActual"];</code>
     *
     * @return int|string
     */
    public function getCostActual()
    {
        return $this->cost_actual;
    }

    /**
     * The actual cost using the strategy specified in strategy.
     *
     * Generated from protobuf field <code>uint64 cost_actual = 4 [json_name = "costActual"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setCostActual($var)
    {
        GPBUtil::checkUint64($var);
        $this->cost_actual = $var;

        return $this;
    }

    /**
     * The depth of the query.
     *
     * Generated from protobuf field <code>uint64 depth = 5 [json_name = "depth"];</code>
     *
     * @return int|string
     */
    public function getDepth()
    {
        return $this->depth;
    }

    /**
     * The depth of the query.
     *
     * Generated from protobuf field <code>uint64 depth = 5 [json_name = "depth"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setDepth($var)
    {
        GPBUtil::checkUint64($var);
        $this->depth = $var;

        return $this;
    }

    /**
     * The height of the query.
     *
     * Generated from protobuf field <code>uint64 height = 6 [json_name = "height"];</code>
     *
     * @return int|string
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * The height of the query.
     *
     * Generated from protobuf field <code>uint64 height = 6 [json_name = "height"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setHeight($var)
    {
        GPBUtil::checkUint64($var);
        $this->height = $var;

        return $this;
    }

    /**
     * The number of aliases in the query.
     *
     * Generated from protobuf field <code>uint64 alias_count = 7 [json_name = "aliasCount"];</code>
     *
     * @return int|string
     */
    public function getAliasCount()
    {
        return $this->alias_count;
    }

    /**
     * The number of aliases in the query.
     *
     * Generated from protobuf field <code>uint64 alias_count = 7 [json_name = "aliasCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setAliasCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->alias_count = $var;

        return $this;
    }

    /**
     * The number of root fields in the query.
     *
     * Generated from protobuf field <code>uint64 root_field_count = 8 [json_name = "rootFieldCount"];</code>
     *
     * @return int|string
     */
    public function getRootFieldCount()
    {
        return $this->root_field_count;
    }

    /**
     * The number of root fields in the query.
     *
     * Generated from protobuf field <code>uint64 root_field_count = 8 [json_name = "rootFieldCount"];</code>
     *
     * @param  int|string  $var
     *
     * @return $this
     */
    public function setRootFieldCount($var)
    {
        GPBUtil::checkUint64($var);
        $this->root_field_count = $var;

        return $this;
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Limits::class, \Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace_Limits::class);

<?php declare(strict_types=1);
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Tracing/FederatedTracing/reports.proto

namespace Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace\CachePolicy;

/**
 * Protobuf type <code>Trace.CachePolicy.Scope</code>.
 */
class Scope
{
    /** Generated from protobuf enum <code>UNKNOWN = 0;</code> */
    public const UNKNOWN = 0;
    /** Generated from protobuf enum <code>PUBLIC = 1;</code> */
    public const PBPUBLIC = 1;
    /** Generated from protobuf enum <code>PRIVATE = 2;</code> */
    public const PBPRIVATE = 2;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::PBPUBLIC => 'PUBLIC',
        self::PBPRIVATE => 'PRIVATE',
    ];

    public static function name($value)
    {
        if (! isset(self::$valueToName[$value])) {
            throw new \UnexpectedValueException(sprintf(
                'Enum %s has no name defined for value %s',
                __CLASS__,
                $value,
            ));
        }

        return self::$valueToName[$value];
    }

    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (! defined($const)) {
            $pbconst = __CLASS__ . '::PB' . strtoupper($name);
            if (! defined($pbconst)) {
                throw new \UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s',
                    __CLASS__,
                    $name,
                ));
            }

            return constant($pbconst);
        }

        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Scope::class, \Nuwave\Lighthouse\Tracing\FederatedTracing\Proto\Trace_CachePolicy_Scope::class);
